# .github/workflows/homebrew-release.yml
# Start Homebrew Releaser when a new GitHub release is created
on:
  release:
    types: [published]

jobs:
  homebrew-releaser:
    runs-on: ubuntu-latest
    name: homebrew-releaser
    steps:
      - name: Release project to Homebrew tap
        uses: Justintime50/homebrew-releaser@v2
        with:
          # The name of the homebrew tap to publish your formula to as it appears on GitHub.
          # Required - strings
          homebrew_owner: doucol
          homebrew_tap: homebrew-tap

          # The name of the folder in your homebrew tap where formula will be committed to.
          # Default is shown - string
          formula_folder: Formula

          # The Personal Access Token (saved as a repo secret) that has `repo` permissions for the repo running the action AND Homebrew tap you want to release to.
          # Required - string
          github_token: ${{ secrets.GORELEASER_GH_TOKEN }}

          # Git author info used to commit to the homebrew tap.
          # Defaults are shown - strings
          commit_owner: homebrew-releaser
          commit_email: homebrew-releaser@example.com

          # Install command for your formula.
          # Required - string
          install: 'bin.install "${{ github.event.repository.name }}"'

          # Test command for your formula, used for `brew test`.
          # Optional - string
          test: 'assert_match("${{ github.ref_name }}", shell_output("#{bin}/${{ github.event.repository.name }} version"))'

          # Custom dependencies in case other formulas are needed to build the current one.
          # Optional - multiline string
          # depends_on: |
          #   "bash" => :build
          #   "gcc"

          # Allows you to set a custom download strategy.
          # NOTE: You'll need to implement the strategy and add it to your tap repository.
          # Docs: https://docs.brew.sh/Formula-Cookbook#specifying-the-download-strategy-explicitly
          # Optional - string
          # download_strategy: CurlDownloadStrategy

          # Allows you to add a custom `require_relative` at the top of the formula template.
          # Optional - string
          # custom_require: custom_download_strategy

          # Allows you to add custom includes inside the formula class, before dependencies and install blocks.
          # Optional - string
          # formula_includes: 'include Language::Python::Virtualenv'

          # Run 'brew update-python-resources' on the formula to add Python resources.
          # Docs: https://docs.brew.sh/Python-for-Formula-Authors#python-declarations-for-applications
          # NOTE: This only works with public repositories currently and must be done manually if for a private repo.
          # Default is shown - boolean
          update_python_resources: false

          # Adds URL and checksum targets for different OS and architecture pairs. Using this option assumes
          # a tar archive exists on your GitHub repo with the following URL pattern (this cannot be customized):
          # https://github.com/{GITHUB_OWNER}/{REPO_NAME}/releases/download/{TAG}/{REPO_NAME}-{VERSION}-{OPERATING_SYSTEM}-{ARCHITECTURE}.tar.gz'
          # Darwin AMD pre-existing path example: https://github.com/justintime50/myrepo/releases/download/v1.2.0/myrepo-1.2.0-darwin-amd64.tar.gz
          # Linux ARM pre-existing path example: https://github.com/justintime50/myrepo/releases/download/v1.2.0/myrepo-1.2.0-linux-arm64.tar.gz
          # Optional - booleans
          target_darwin_amd64: true
          target_darwin_arm64: true
          target_linux_amd64: true
          target_linux_arm64: true

          # Update your homebrew tap's README with a table of all projects in the tap.
          # This is done by pulling the information from all your formula.rb files - eg:
          #
          # | Project                                    | Description  | Install                  |
          # | ------------------------------------------ | ------------ | ------------------------ |
          # | [formula_1](https://github.com/user/repo1) | helpful text | `brew install formula_1` |
          # | [formula_2](https://github.com/user/repo2) | helpful text | `brew install formula_2` |
          # | [formula_3](https://github.com/user/repo3) | helpful text | `brew install formula_3` |
          #
          # Place the following in your README or wrap your project's table in these comment tags:
          # <!-- project_table_start -->
          # TABLE HERE
          # <!-- project_table_end -->
          #
          # Finally, mark `update_readme_table` as `true` in your GitHub Action config and we'll do the work of building a custom table for you.
          # Default is shown - boolean
          update_readme_table: false

          # Skips committing the generated formula to a homebrew tap (useful to verify results on a first run).
          # Default is shown - boolean
          skip_commit: false

          # Logs debugging info to console.
          # Default is shown - boolean
          debug: false
